version: 2.1

orbs:
  node: circleci/node@5
  browser-tools: circleci/browser-tools@1.4
  jira: circleci/jira@2.0
  sonarcloud: sonarsource/sonarcloud@2.0

executors:
  node-executor:
    docker:
      - image: cimg/node:18.16
    resource_class: medium

workflows:
  version: 2
  build-test-deploy:
    jobs:
      # Stage Build
      - install-dependencies:
          filters:
            branches:
              only: 
                - develop
                - integration
                - main
                - /^feature.*/
                - /^hotfix.*/
      - code-analysis:
          requires:
            - install-dependencies
      - clean-and-package:
          requires:
            - code-analysis

      # Stage Tests
      - unit-tests:
          requires:
            - clean-and-package
      - integration-tests:
          requires:
            - unit-tests
      - regression-tests:
          requires:
            - unit-tests
      - performance-tests:
          requires:
            - unit-tests
      - security-tests:
          requires:
            - unit-tests
      - compatibility-tests:
          requires:
            - unit-tests
      - accessibility-tests:
          requires:
            - unit-tests

      # Stage Deploy
      - prepare-deploy-env:
          requires:
            - integration-tests
            - regression-tests
            - performance-tests
            - security-tests
            - compatibility-tests
            - accessibility-tests
          filters:
            branches:
              only: 
                - develop
                - integration
                - main
      - deploy-application:
          requires:
            - prepare-deploy-env
      - verification-tests:
          requires:
            - deploy-application
      - functional-validation:
          requires:
            - verification-tests
      - load-tests:
          requires:
            - functional-validation
      - final-deployment:
          requires:
            - load-tests
      - monitoring-setup:
          requires:
            - final-deployment

jobs:
  # --- STAGE BUILD ---
  install-dependencies:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
            - v1-dependencies-
      - node/install-packages:
          pkg-manager: npm
      - run:
          name: Resolve dependencies
          command: npm dedupe
      - save_cache:
          paths:
            - node_modules
          key: v1-dependencies-{{ checksum "package.json" }}

  code-analysis:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Run ESLint
          command: npx eslint . || true
      - run:
          name: Run TypeScript compiler check
          command: npx tsc --noEmit
      - sonarcloud/scan:
          cache_version: 1

  clean-and-package:
    executor: node-executor
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-dependencies-{{ checksum "package.json" }}
      - run:
          name: Clean previous build
          command: rm -rf .next || true
      - run:
          name: Build Next.js application
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - .next
            - node_modules
            - public
            - package.json
            - package-lock.json

  # --- STAGE TESTS ---
  unit-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run unit tests
          command: npm run test:ci
      - store_test_results:
          path: ./test-results/

  integration-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run integration tests
          command: npm run test:integration || echo "No integration tests configured"
      - store_test_results:
          path: ./test-results/

  regression-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools:
          chrome-version: 116.0.5845.96
      - run:
          name: Run regression tests
          command: npm run test:regression || echo "No regression tests configured"
      - store_artifacts:
          path: ./test-artifacts
          destination: regression-test-results

  performance-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run Lighthouse performance tests
          command: npx lighthouse https://staging-environment-url.com --output html --output-path ./performance-report.html || echo "No performance tests configured"
      - store_artifacts:
          path: ./performance-report.html
          destination: performance-reports

  security-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: NPM Audit
          command: npm audit --audit-level=high || true
      - run:
          name: Run OWASP Dependency Check
          command: |
            mkdir -p ~/reports
            wget -O ~/dc.sh https://raw.githubusercontent.com/jeremylong/DependencyCheck/main/cli/src/main/resources/dc.sh
            chmod +x ~/dc.sh
            ~/dc.sh --scan . --out ~/reports/dependency-check-report.html || echo "Warning: Security issues detected"
      - store_artifacts:
          path: ~/reports
          destination: security-reports

  compatibility-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools
      - run:
          name: Run cross-browser tests
          command: npm run test:compatibility || echo "No compatibility tests configured"
      - store_artifacts:
          path: ./compatibility-reports
          destination: browser-compatibility-reports

  accessibility-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Run accessibility tests
          command: |
            npx pa11y-ci || echo "Accessibility issues detected, please review the report"
      - store_artifacts:
          path: ./a11y-reports
          destination: accessibility-reports

  # --- STAGE DEPLOY ---
  prepare-deploy-env:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Prepare environment configuration
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              echo "Preparing development environment"
              cp ./config/env.development.js ./config/env.js
            elif [ "${CIRCLE_BRANCH}" == "integration" ]; then
              echo "Preparing integration environment"
              cp ./config/env.integration.js ./config/env.js
            elif [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "Preparing production environment"
              cp ./config/env.production.js ./config/env.js
            fi
      - persist_to_workspace:
          root: .
          paths:
            - .
            - config

  deploy-application:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Install deployment dependencies
          command: npm install -g pm2 || true
      - run:
          name: Deploy to environment
          command: |
            if [ "${CIRCLE_BRANCH}" == "develop" ]; then
              echo "Deploying to development server"
              # Add your deployment commands here
            elif [ "${CIRCLE_BRANCH}" == "integration" ]; then
              echo "Deploying to integration server"
              # Add your deployment commands here
            elif [ "${CIRCLE_BRANCH}" == "main" ]; then
              echo "Deploying to production server"
              # Add your deployment commands here
            fi

  verification-tests:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Verify deployment
          command: |
            echo "Verifying that the application is running"
            # Add commands to check if the app responds correctly
            curl -f https://${DEPLOY_URL}/health-check || exit 1

  functional-validation:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - browser-tools/install-browser-tools
      - run:
          name: Run functional tests against deployed app
          command: npm run test:e2e || echo "No E2E tests configured"
      - store_test_results:
          path: ./test-results/
      - store_artifacts:
          path: ./test-screenshots
          destination: functional-test-screenshots

  load-tests:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Install k6
          command: |
            sudo apt-key adv --keyserver hkp://keyserver.ubuntu.com:80 --recv-keys C5AD17C747E3415A3642D57D77C6C491D6AC1D69
            echo "deb https://dl.k6.io/deb stable main" | sudo tee /etc/apt/sources.list.d/k6.list
            sudo apt-get update
            sudo apt-get install k6 -y
      - run:
          name: Run load tests
          command: k6 run ./tests/load-tests/main.js || echo "Load test thresholds not met"
      - store_artifacts:
          path: ./load-test-results
          destination: load-test-results

  final-deployment:
    executor: node-executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Final deployment steps
          command: |
            echo "Completing deployment process"
            # Add commands for final deployment tasks like CDN invalidation, etc.
      - run:
          name: Notify team of successful deployment
          command: |
            echo "Deployment completed successfully"
            # Add commands to send notifications
      - jira/notify:
          job_type: deployment
          environment_type: production

  monitoring-setup:
    executor: node-executor
    steps:
      - checkout
      - attach_workspace:
          at: .
      - run:
          name: Set up monitoring
          command: |
            echo "Setting up application monitoring"
            # Add commands to configure monitoring and alerts
      - run:
          name: Create deployment tag
          command: |
            if [ "${CIRCLE_BRANCH}" == "main" ]; then
              git tag "release-$(date +%Y%m%d-%H%M)"
              git push --tags
            fi